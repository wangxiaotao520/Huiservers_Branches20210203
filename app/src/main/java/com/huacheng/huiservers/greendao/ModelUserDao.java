package com.huacheng.huiservers.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huacheng.huiservers.model.ModelUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MODEL_USER".
*/
public class ModelUserDao extends AbstractDao<ModelUser, Long> {

    public static final String TABLENAME = "MODEL_USER";

    /**
     * Properties of entity ModelUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Fullname = new Property(2, String.class, "fullname", false, "FULLNAME");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Utype = new Property(4, String.class, "utype", false, "UTYPE");
        public final static Property Pwd = new Property(5, String.class, "pwd", false, "PWD");
        public final static Property Avatars = new Property(6, String.class, "avatars", false, "AVATARS");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(8, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property Company_id = new Property(10, String.class, "company_id", false, "COMPANY_ID");
        public final static Property Community_id = new Property(11, String.class, "community_id", false, "COMMUNITY_ID");
        public final static Property Is_bind_property = new Property(12, String.class, "is_bind_property", false, "IS_BIND_PROPERTY");
        public final static Property Reg_time = new Property(13, String.class, "reg_time", false, "REG_TIME");
        public final static Property Last_login_time = new Property(14, String.class, "last_login_time", false, "LAST_LOGIN_TIME");
        public final static Property Last_login_ip = new Property(15, String.class, "last_login_ip", false, "LAST_LOGIN_IP");
        public final static Property Status = new Property(16, String.class, "status", false, "STATUS");
        public final static Property Phone_name = new Property(17, String.class, "phone_name", false, "PHONE_NAME");
        public final static Property Phone_type = new Property(18, String.class, "phone_type", false, "PHONE_TYPE");
        public final static Property Weixin_nick = new Property(19, String.class, "weixin_nick", false, "WEIXIN_NICK");
        public final static Property Weixin_openid = new Property(20, String.class, "weixin_openid", false, "WEIXIN_OPENID");
        public final static Property Wx_bindingtime = new Property(21, String.class, "wx_bindingtime", false, "WX_BINDINGTIME");
        public final static Property Recommended_uid = new Property(22, String.class, "recommended_uid", false, "RECOMMENDED_UID");
        public final static Property TokenTime = new Property(23, String.class, "tokenTime", false, "TOKEN_TIME");
        public final static Property Token = new Property(24, String.class, "token", false, "TOKEN");
        public final static Property TokenSecret = new Property(25, String.class, "tokenSecret", false, "TOKEN_SECRET");
        public final static Property Source = new Property(26, String.class, "source", false, "SOURCE");
    }


    public ModelUserDao(DaoConfig config) {
        super(config);
    }
    
    public ModelUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MODEL_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: uid
                "\"USERNAME\" TEXT," + // 1: username
                "\"FULLNAME\" TEXT," + // 2: fullname
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"UTYPE\" TEXT," + // 4: utype
                "\"PWD\" TEXT," + // 5: pwd
                "\"AVATARS\" TEXT," + // 6: avatars
                "\"SEX\" TEXT," + // 7: sex
                "\"BIRTHDAY\" TEXT," + // 8: birthday
                "\"EMAIL\" TEXT," + // 9: email
                "\"COMPANY_ID\" TEXT," + // 10: company_id
                "\"COMMUNITY_ID\" TEXT," + // 11: community_id
                "\"IS_BIND_PROPERTY\" TEXT," + // 12: is_bind_property
                "\"REG_TIME\" TEXT," + // 13: reg_time
                "\"LAST_LOGIN_TIME\" TEXT," + // 14: last_login_time
                "\"LAST_LOGIN_IP\" TEXT," + // 15: last_login_ip
                "\"STATUS\" TEXT," + // 16: status
                "\"PHONE_NAME\" TEXT," + // 17: phone_name
                "\"PHONE_TYPE\" TEXT," + // 18: phone_type
                "\"WEIXIN_NICK\" TEXT," + // 19: weixin_nick
                "\"WEIXIN_OPENID\" TEXT," + // 20: weixin_openid
                "\"WX_BINDINGTIME\" TEXT," + // 21: wx_bindingtime
                "\"RECOMMENDED_UID\" TEXT," + // 22: recommended_uid
                "\"TOKEN_TIME\" TEXT," + // 23: tokenTime
                "\"TOKEN\" TEXT," + // 24: token
                "\"TOKEN_SECRET\" TEXT," + // 25: tokenSecret
                "\"SOURCE\" TEXT);"); // 26: source
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MODEL_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ModelUser entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(3, fullname);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String utype = entity.getUtype();
        if (utype != null) {
            stmt.bindString(5, utype);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(6, pwd);
        }
 
        String avatars = entity.getAvatars();
        if (avatars != null) {
            stmt.bindString(7, avatars);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(9, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(11, company_id);
        }
 
        String community_id = entity.getCommunity_id();
        if (community_id != null) {
            stmt.bindString(12, community_id);
        }
 
        String is_bind_property = entity.getIs_bind_property();
        if (is_bind_property != null) {
            stmt.bindString(13, is_bind_property);
        }
 
        String reg_time = entity.getReg_time();
        if (reg_time != null) {
            stmt.bindString(14, reg_time);
        }
 
        String last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindString(15, last_login_time);
        }
 
        String last_login_ip = entity.getLast_login_ip();
        if (last_login_ip != null) {
            stmt.bindString(16, last_login_ip);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
 
        String phone_name = entity.getPhone_name();
        if (phone_name != null) {
            stmt.bindString(18, phone_name);
        }
 
        String phone_type = entity.getPhone_type();
        if (phone_type != null) {
            stmt.bindString(19, phone_type);
        }
 
        String weixin_nick = entity.getWeixin_nick();
        if (weixin_nick != null) {
            stmt.bindString(20, weixin_nick);
        }
 
        String weixin_openid = entity.getWeixin_openid();
        if (weixin_openid != null) {
            stmt.bindString(21, weixin_openid);
        }
 
        String wx_bindingtime = entity.getWx_bindingtime();
        if (wx_bindingtime != null) {
            stmt.bindString(22, wx_bindingtime);
        }
 
        String recommended_uid = entity.getRecommended_uid();
        if (recommended_uid != null) {
            stmt.bindString(23, recommended_uid);
        }
 
        String tokenTime = entity.getTokenTime();
        if (tokenTime != null) {
            stmt.bindString(24, tokenTime);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(25, token);
        }
 
        String tokenSecret = entity.getTokenSecret();
        if (tokenSecret != null) {
            stmt.bindString(26, tokenSecret);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(27, source);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ModelUser entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(3, fullname);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String utype = entity.getUtype();
        if (utype != null) {
            stmt.bindString(5, utype);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(6, pwd);
        }
 
        String avatars = entity.getAvatars();
        if (avatars != null) {
            stmt.bindString(7, avatars);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(9, birthday);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(11, company_id);
        }
 
        String community_id = entity.getCommunity_id();
        if (community_id != null) {
            stmt.bindString(12, community_id);
        }
 
        String is_bind_property = entity.getIs_bind_property();
        if (is_bind_property != null) {
            stmt.bindString(13, is_bind_property);
        }
 
        String reg_time = entity.getReg_time();
        if (reg_time != null) {
            stmt.bindString(14, reg_time);
        }
 
        String last_login_time = entity.getLast_login_time();
        if (last_login_time != null) {
            stmt.bindString(15, last_login_time);
        }
 
        String last_login_ip = entity.getLast_login_ip();
        if (last_login_ip != null) {
            stmt.bindString(16, last_login_ip);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
 
        String phone_name = entity.getPhone_name();
        if (phone_name != null) {
            stmt.bindString(18, phone_name);
        }
 
        String phone_type = entity.getPhone_type();
        if (phone_type != null) {
            stmt.bindString(19, phone_type);
        }
 
        String weixin_nick = entity.getWeixin_nick();
        if (weixin_nick != null) {
            stmt.bindString(20, weixin_nick);
        }
 
        String weixin_openid = entity.getWeixin_openid();
        if (weixin_openid != null) {
            stmt.bindString(21, weixin_openid);
        }
 
        String wx_bindingtime = entity.getWx_bindingtime();
        if (wx_bindingtime != null) {
            stmt.bindString(22, wx_bindingtime);
        }
 
        String recommended_uid = entity.getRecommended_uid();
        if (recommended_uid != null) {
            stmt.bindString(23, recommended_uid);
        }
 
        String tokenTime = entity.getTokenTime();
        if (tokenTime != null) {
            stmt.bindString(24, tokenTime);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(25, token);
        }
 
        String tokenSecret = entity.getTokenSecret();
        if (tokenSecret != null) {
            stmt.bindString(26, tokenSecret);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(27, source);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ModelUser readEntity(Cursor cursor, int offset) {
        ModelUser entity = new ModelUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fullname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // utype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pwd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatars
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // birthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // company_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // community_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // is_bind_property
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // reg_time
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // last_login_time
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // last_login_ip
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // status
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // phone_name
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // phone_type
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // weixin_nick
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // weixin_openid
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // wx_bindingtime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // recommended_uid
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // tokenTime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // token
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tokenSecret
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // source
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ModelUser entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFullname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUtype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPwd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatars(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBirthday(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompany_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCommunity_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_bind_property(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReg_time(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLast_login_time(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLast_login_ip(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPhone_name(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPhone_type(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWeixin_nick(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setWeixin_openid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWx_bindingtime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRecommended_uid(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTokenTime(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setToken(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTokenSecret(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSource(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ModelUser entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ModelUser entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ModelUser entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
